import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
	id 'fabric-loom' version '0.4-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "primalwinter-fabric-${project.minecraft_version}"
group = 'com.alcatrazescapee'
def envVersion = System.getenv("VERSION")
version = envVersion == null ? 'dev' : envVersion

repositories {
    jcenter()
}

dependencies {
	// Core
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // AutoConfig
    modApi "me.sargunvohra.mcmods:autoconfig1u:${project.autoconfig1u_version}"
    include "me.sargunvohra.mcmods:autoconfig1u:${project.autoconfig1u_version}"

    modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"
    modImplementation "me.shedaniel.cloth:config-2:${project.cloth_config_version}"
}

processResources {
	inputs.property "version", version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}

    // Minify the json files in the output jar, reduces overall jar size.
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            file.text = file.text.replace('"__comment__":"This file was automatically created by mcresources",', '')
        }
    }
}

minecraft {
    accessWidener "src/main/resources/primalwinter.accesswidener"
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

jar {
	from "LICENSE.md"
}